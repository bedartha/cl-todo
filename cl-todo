#! /usr/bin/env bash
# -----------------------------------------------------------------------------
# cl-todo -  Barebones command line ToDo list manager
#
#           cl-todo maintains a list of tasks in a user specified text file
#           using the widely used checklist formatting of Markdown. Tasks can
#           be further categorised in projects simply by adding tags with the
#           `@` sign, e.g.  `@work`, `@personal`, `@home`, etc.

# Created: Fri Oct 08, 2021  12:33pm
# Last modified: Thu Oct 14, 2021  04:38pm
#
# Copyright (C) 2021  Bedartha Goswami <bedartha@gmail.com>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------------

USAGE="
cl-todo -  Barebones command line ToDo list manager

SYNOPSIS
    cl-todo [OPTION] [KEYWORD]

DESCRIPTION

    cl-todo maintains a list of tasks in a user specified text file using the
    widely used checklist formatting of Markdown. Tasks can be further
    categorised in projects simply by adding tags with the '@' sign, e.g.
    '@work', '@personal', '@home', etc.
    
OPTIONS

    add | a [task]
        add the task to the current list of ToDos.

    remove | rm [task]
        remove the specified task from the current list of ToDos.

    done | d [task]
        mark specified task as completed. Here [task] can be part or whole of
        the string describing the task. Note: Ensure that [task] specifies the
        task uniquely.

    undone | u [task]
        mark specified task as not completed. See 'done' for more details.

    edit | e
        Opens the Markdown file with current tasks using a specified editor of
        choice. The editor is specified using CLTODO_EDITOR which by default is
        vim. Note that this variable has to correspond to the command line
        executable that will work as 'CLTODO_EDITOR /path/to/todo_file'.
        Unfortunately, cl-todo is not smart enough to allow to edit each task
        individually from the terminal itself.

    all | l [keyword]
        When [keyword] is not specified, list all current tasks, including both
        completed and pending tasks. Otherwise, list all tasks with [keyword].
        Note that his can be useful in querying tasks belonging to a project
        with the keyword '@project'.

    pending | p [keyword]
        When [keyword] is not specified, list pending tasks, including both
        completed and pending tasks. Otherwise, list pending tasks with
        [keyword]. Note that his can be useful in querying pending tasks
        belonging to a project with the keyword '@project'.
        

    completed | c [keyword]
        When [keyword] is not specified, list completed tasks, including both
        completed and completed tasks. Otherwise, list completed tasks with
        [keyword].  Note that his can be useful in querying completed tasks
        belonging to a project with the keyword '@project'.

    clean
        Remove all completed tasks from the ToDo file and append them to the
        ToDo archive file with time stamps corresponding to the time of
        archival. See 'file' for more details.

    file [keyword]
        list the paths to the Markdown files containing the list o current tasks
        and the list of archived tasks respectively. Here, [keyword] can be one
        of the following:

        todo
            list path to the Markdown file for all current tasks. The path is
            stored in the environment variable CLTODO_CURRENT

        archive
            list path to the Markdown file for all archived tasks. The path is
            stored in the environment variable CLTODO_ARCHIVE
    init
        initializes the file locations for the cl-todo app. This needs to be
        run before first use of the app. See README for more details.

    help | h
        Print this help message and exit

        

DEPENDENCY
    python3-pygments

ENVIRONMENT VARIABLES
    CLTODO_CURRENT      path to Markdown file with current tasks
    CLTODO_ARCHIVE      path to Markdown file with archived tasks
    CLTODO_EDITOR       name of executable with which to edit CLTODO_CURRENT
    CLTODO_DIR          path to use for cl-todo Markdown files 

AUTHOR
    Bedartha Goswami
    bedartha@gmail.com

COPYRIGHT
    Copyright (c) Bedartha Goswami 2021.
    Please visit https://github.com/bedartha/cl-todo for full information.
    This is free software; see the source code for copying conditions. There is
    NO warranty. Use it at your own risk, or convenience, as the case may be.
"
# -----------------------------------------------------------------------------
# (Very basic) Input argument parsing
# -----------------------------------------------------------------------------
# exit if no input is given
if [ -z "$1" ]
then
    echo "cl-todo"
    echo "Error: No input provided"
    echo "See 'cl-todo help' for more details"
    exit
fi

# exit with error message if inputs are incorrect
InputOpts=("help" "--help" "-h" \
              "add" "a" "remove" "rm" "done" "d" "undone" "u" \
              "all" "l" "pending" "p" "completed" "c" \
              "today" "tod" "tomorrow" "tom" "week" \
              "clean" "edit" "file" "init" \
              )

VALID_INPUT=0
for OPT in ${InputOpts[*]}
do
    if [ "$1" = "$OPT" ]
    then
        VALID_INPUT=1
        break
    fi  
done

if [ $VALID_INPUT -eq 0 ]
then
    echo "cl-todo"
    echo "Error: Invalid input"
    echo "See 'cl-todo help' for more details."
    exit
fi

# -----------------------------------------------------------------------------
# help, --help -h
# -----------------------------------------------------------------------------
# display help message
if [ $1 = "help" ] || [ $1 = "--help" ] || [ $1 = "-h" ]
then
    echo "$USAGE"
    exit
fi

# source basic parameters from $CLTODORC
CLTODORC=$HOME/.cltodorc
source $CLTODORC


# -----------------------------------------------------------------------------
# parse_dates
# -----------------------------------------------------------------------------
# helper function to parse date information in task text string
parse_line () {
    LINE=$@
    TASK=${LINE/@*/}
    DATE=${LINE/*due/}
    PROJECT=$(echo ${LINE/*@/} | awk '{print $1}')
}


# -----------------------------------------------------------------------------
# add
# -----------------------------------------------------------------------------
# add a new task
if [ "$1" = "add" ] || [ "$1" = "a" ]
then
    echo Enter details of task:
    read TASK
    echo Enter due date:
    read DATE
    echo Enter project name:
    read PROJECT
    DATE=$(date --date="$DATE"  +"%a %d %b %Y")
    LINE="$TASK @$PROJECT #due $DATE"
    echo "[ ] $LINE" >> $CLTODO_CURRENT
    echo Task added: $LINE
fi

# -----------------------------------------------------------------------------
# remove
# -----------------------------------------------------------------------------
# remove existing task
if [ "$1" = "remove" ] || [ "$1" = "rm" ]
then
    LINE=$@
    TASK=${LINE/$1 /}
    TASK_FULL=$(grep "$TASK" $CLTODO_CURRENT)
    sed -i "/$TASK/d" "$CLTODO_CURRENT"
    echo Removed task: ${TASK_FULL:4}
fi

# -----------------------------------------------------------------------------
# done
# -----------------------------------------------------------------------------
# mark task as completed
if [ "$1" = "done" ] || [ "$1" = "d" ]
then
    LINE=$@
    TASK=${LINE/$1 /}
    TASK_FULL=$(grep "$TASK" $CLTODO_CURRENT)
    sed -i "s/\[\ \] $TASK/\[x\] $TASK/" $CLTODO_CURRENT
    echo Marked as done: ${TASK_FULL:4}
fi


# -----------------------------------------------------------------------------
# undone
# -----------------------------------------------------------------------------
# mark task as not completed
if [ "$1" = "undone" ] || [ "$1" = "u" ]
then
    LINE=$@
    TASK=${LINE/$1 /}
    TASK_FULL=$(grep "$TASK" $CLTODO_CURRENT)
    sed -i "s/\[x\] $TASK/\[\ \] $TASK/" $CLTODO_CURRENT
    echo Marked as not done: ${TASK_FULL:4} 
fi

# -----------------------------------------------------------------------------
# edit
# -----------------------------------------------------------------------------
# edit current task(s)
if [ "$1" = "edit" ] || [ "$1" = "e" ]
then
    $CLTODO_EDITOR $CLTODO_CURRENT
fi

# -----------------------------------------------------------------------------
# all
# -----------------------------------------------------------------------------
# list all current tasks
if [ "$1" = "all" ] || [ "$1" = "l" ]
then
    if [ "$2" = "" ]
    then
        pygmentize -l md $CLTODO_CURRENT | sort
    else
        pygmentize -l md $CLTODO_CURRENT | sort | grep "$2"
    fi
fi

# -----------------------------------------------------------------------------
# pending
# -----------------------------------------------------------------------------
# list pending current tasks
if [ "$1" = "pending" ] || [ "$1" = "p" ]
then
    if [ "$2" = "" ]
    then
        sed "/\[x\]/d" "$CLTODO_CURRENT" | pygmentize -l md | sort
    else
        sed "/\[x\]/d" "$CLTODO_CURRENT" | pygmentize -l md | sort | grep "$2"
    fi
fi

# -----------------------------------------------------------------------------
# completed
# -----------------------------------------------------------------------------
# list completed current tasks
if [ "$1" = "completed" ] || [ "$1" = "c" ]
then
    if [ "$2" = "" ]
    then
        sed "/\[ \]/d" "$CLTODO_CURRENT" | pygmentize -l md | sort
    else
        sed "/\[ \]/d" "$CLTODO_CURRENT" | pygmentize -l md | sort | grep "$2"
    fi
fi

# -----------------------------------------------------------------------------
# today
# -----------------------------------------------------------------------------
# list all (i.e. pending and completed) tasks due on current day
if [ "$1" = "today" ] || [ "$1" = "tod" ]
then
    TODAY=$(date --date="today"  +"%a %d %b %Y")
    sed -n "/$TODAY/p" "$CLTODO_CURRENT" | pygmentize -l md | sort
fi

# -----------------------------------------------------------------------------
# tomorrow
# -----------------------------------------------------------------------------
# list all (i.e. pending and completed) tasks due on the next day
if [ "$1" = "tomorrow" ] || [ "$1" = "tom" ]
then
    TOMORROW=$(date --date="tomorrow"  +"%a %d %b %Y")
    sed -n "/$TOMORROW/p" "$CLTODO_CURRENT" | pygmentize -l md | sort
fi

# -----------------------------------------------------------------------------
# this week
# -----------------------------------------------------------------------------
# list all (i.e. pending and completed) tasks due the current week
if [ "$1" = "week" ] || [ "$1" = "wk" ]
then
    DAYOFWEEK=$(date --date="today"  +"%u")
    for i in $(seq 0 1 $(expr 7 - $DAYOFWEEK)); do
        DATE=$(date --date="today +$i day" +"%a %d %b %Y")
        sed -n "/$DATE/p" "$CLTODO_CURRENT" | pygmentize -l md | sort
    done
fi


# -----------------------------------------------------------------------------
# clean
# -----------------------------------------------------------------------------
# archive completed tasks
if [ "$1" = "clean" ]
then
    touch $CLTODO_ARCHIVE
    TASK_INFO=$(date +"%Y-%m-%d %H:%M" | xargs echo \#\# Completed on or before)
    echo $TASK_INFO >> $CLTODO_ARCHIVE
    sed "/\[\ \]\|ToDo/d" "$CLTODO_CURRENT" >> $CLTODO_ARCHIVE
    echo  "" >> $CLTODO_ARCHIVE
    echo Completed tasks archived
    sed -i "/\[\x\]/d" "$CLTODO_CURRENT"
fi

# -----------------------------------------------------------------------------
# file
# -----------------------------------------------------------------------------
# display path to current tasks and archived tasks Markdown files
if [ "$1" = "file" ]
then
    if [ "$2" = "todo" ]
    then
        echo ToDo list stored at:
        echo $CLTODO_CURRENT 
    fi
    if [ "$2" = "archive" ]
    then
        echo Completed tasks archived at:
        echo $CLTODO_ARCHIVE
    fi
fi

# -----------------------------------------------------------------------------
# init
# -----------------------------------------------------------------------------
# initialize file locations and default editor
if [ "$1" = "init" ]
then
    # initialize file locations
    echo Enter path to use for cl-todo Markdown files [default: ~/cl-todo/]
    read CLTODO_DIR
    if [ "$CLTODO_DIR" = "" ]
    then
        CLTODO_DIR=$HOME/cl-todo
    fi
    CLTODO_CURRENT=$CLTODO_DIR/current.md
    CLTODO_ARCHIVE=$CLTODO_DIR/.archive.md
    mkdir -p $CLTODO_DIR
    touch $CLTODO_CURRENT
    touch $CLTODO_ARCHIVE
    # initialize editor
    echo Enter name of executable to use as Markdown editor [default: vim]

    read CLTODO_EDITOR
    if [ "$CLTODO_EDITOR" = "" ]
    then
        CLTODO_EDITOR=vim
    fi
    # append to cl-todo bashrc
    echo "#! /usr/bin/env bash" > $CLTODORC
    echo "# environment variables for cl-todo" >> $CLTODORC
    echo "CLTODO_DIR=$CLTODO_DIR" >> $CLTODORC
    echo "CLTODO_CURRENT=$CLTODO_CURRENT" >> $CLTODORC
    echo "CLTODO_ARCHIVE=$CLTODO_ARCHIVE" >> $CLTODORC
    echo "CLTODO_EDITOR=$CLTODO_EDITOR" >> $CLTODORC
    echo "parameters initialized. Have fun using cl-todo"
fi

